// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element

import 'package:json_annotation/json_annotation.dart';

part 'search_for_facet_values_request.g.dart';

@JsonSerializable()
final class SearchForFacetValuesRequest {
  /// Returns a new [SearchForFacetValuesRequest] instance.
  const SearchForFacetValuesRequest({
    this.params,
    this.facetQuery,
    this.maxFacetHits,
    this.query,
    this.facetFilters,
    this.facets,
  });

  /// Search parameters as a URL-encoded query string.
  @JsonKey(name: r'params')
  final String? params;

  /// Text to search inside the facet's values.
  @JsonKey(name: r'facetQuery')
  final String? facetQuery;

  /// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
  // maximum: 100
  @JsonKey(name: r'maxFacetHits')
  final int? maxFacetHits;

  /// Search query.
  @JsonKey(name: r'query')
  final String? query;

  /// One of types:
  /// - [List<List<FacetFilters>>]
  /// - [String]
  /// - [List<String>]
  @JsonKey(name: r'facetFilters')
  final dynamic facetFilters;

  /// Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.  To retrieve all facets, use the wildcard character `*`. For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
  @JsonKey(name: r'facets')
  final List<String>? facets;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SearchForFacetValuesRequest &&
          other.params == params &&
          other.facetQuery == facetQuery &&
          other.maxFacetHits == maxFacetHits;

  @override
  int get hashCode =>
      params.hashCode + facetQuery.hashCode + maxFacetHits.hashCode;

  factory SearchForFacetValuesRequest.fromJson(Map<String, dynamic> json) =>
      _$SearchForFacetValuesRequestFromJson(json);

  Map<String, dynamic> toJson() => _$SearchForFacetValuesRequestToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
